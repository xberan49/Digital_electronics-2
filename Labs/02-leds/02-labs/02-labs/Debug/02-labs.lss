
02-labs.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000736  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066f  00000000  00000000  000008ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000017b  00000000  00000000  00000f5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000010d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003be  00000000  00000000  000010fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  000014ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000154a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
 **********************************************************************/
int main(void)
{
    // Green LED at port B
    // Set pin as output in Data Direction Register...
    DDRB = DDRB | (1<<1);
  80:	21 9a       	sbi	0x04, 1	; 4
    // ...and turn LED off in Data Register
    PORTB = PORTB & ~(1<<LED_2);
  82:	2d 98       	cbi	0x05, 5	; 5

    // Configure the second LED at port C
    DDRC = DDRC | (1<<LED_1);
  84:	3d 9a       	sbi	0x07, 5	; 7
    PORTC = PORTC & ~(1<<LED_2);
  86:	45 98       	cbi	0x08, 5	; 8

    // Configure Push button at port D and enable internal pull-up resistor
	DDRD = DDRD & ~ (1<<BUTTON);
  88:	55 98       	cbi	0x0a, 5	; 10
	PORTD = PORTD & ~ (1<<BUTTON);
  8a:	5d 98       	cbi	0x0b, 5	; 11
    while (1)
    {
        if (((PIND >> BUTTON) & 1) == 1)
		{
        _delay_ms(BLINK_DELAY);
        PORTB = PORTB ^ (1<<LED_1);
  8c:	80 e2       	ldi	r24, 0x20	; 32
	PORTD = PORTD & ~ (1<<BUTTON);

    // Infinite loop
    while (1)
    {
        if (((PIND >> BUTTON) & 1) == 1)
  8e:	4d 9b       	sbis	0x09, 5	; 9
  90:	fe cf       	rjmp	.-4      	; 0x8e <main+0xe>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	2f ef       	ldi	r18, 0xFF	; 255
  94:	39 e6       	ldi	r19, 0x69	; 105
  96:	98 e1       	ldi	r25, 0x18	; 24
  98:	21 50       	subi	r18, 0x01	; 1
  9a:	30 40       	sbci	r19, 0x00	; 0
  9c:	90 40       	sbci	r25, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <main+0x18>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <main+0x22>
  a2:	00 00       	nop
		{
        _delay_ms(BLINK_DELAY);
        PORTB = PORTB ^ (1<<LED_1);
  a4:	95 b1       	in	r25, 0x05	; 5
  a6:	98 27       	eor	r25, r24
  a8:	95 b9       	out	0x05, r25	; 5
        PORTC = PORTC ^ (1<<LED_2);
  aa:	98 b1       	in	r25, 0x08	; 8
  ac:	98 27       	eor	r25, r24
  ae:	98 b9       	out	0x08, r25	; 8
  b0:	2f ef       	ldi	r18, 0xFF	; 255
  b2:	39 e6       	ldi	r19, 0x69	; 105
  b4:	98 e1       	ldi	r25, 0x18	; 24
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	30 40       	sbci	r19, 0x00	; 0
  ba:	90 40       	sbci	r25, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x36>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x40>
  c0:	00 00       	nop
        _delay_ms(BLINK_DELAY);
        PORTB = PORTB ^ (1<<LED_1);
  c2:	95 b1       	in	r25, 0x05	; 5
  c4:	98 27       	eor	r25, r24
  c6:	95 b9       	out	0x05, r25	; 5
        PORTC = PORTC ^ (1<<LED_2);
  c8:	98 b1       	in	r25, 0x08	; 8
  ca:	98 27       	eor	r25, r24
  cc:	98 b9       	out	0x08, r25	; 8
  ce:	df cf       	rjmp	.-66     	; 0x8e <main+0xe>

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>
